package plan;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;


import util.DatabaseUtil;

public class PlanDAO {
	
	public int write(PlanDTO planDTO) {			
		String SQL = "INSERT INTO plan VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = DatabaseUtil.getConnection();
			pstmt = conn.prepareStatement(SQL);
			
			pstmt.setString(1, planDTO.getId());
			pstmt.setString(2, planDTO.getLectureOpener());
			pstmt.setString(3, planDTO.getLectureTime());
			pstmt.setString(4, planDTO.getLectureMentor());
			pstmt.setString(5, planDTO.getLectureSubject());
			pstmt.setString(6, planDTO.getLectureDivide());
			pstmt.setString(7, planDTO.getLectureName());
			pstmt.setString(8, planDTO.getLectureBackground());
			pstmt.setString(9, planDTO.getLectureGoal());
			pstmt.setString(10, planDTO.getLecture1st());
			pstmt.setString(11,planDTO.getLecture2st());
			pstmt.setString(12, planDTO.getLecture3st());
			pstmt.setString(13, planDTO.getLecture4st());
			pstmt.setString(14, planDTO.getLecture5st());
			pstmt.setString(15, planDTO.getLectureObject());
			pstmt.setString(16, planDTO.getlRI());
			pstmt.setString(17, planDTO.getlEPI());
			pstmt.setString(18, planDTO.getlRM());
			pstmt.setString(19, planDTO.getlEPM());
			pstmt.setString(20, planDTO.getlRA());
			pstmt.setString(21, planDTO.getlEPA());
			pstmt.setString(22, planDTO.getLectureRatingStandard());
			
			// insert한 구문을 반환 할 수 있도록 return문 (1반환)
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try { if(conn != null) conn.close();} catch (Exception e) {e.printStackTrace();}
			try { if(pstmt != null) pstmt.close();} catch (Exception e) {e.printStackTrace();}
			try { if(rs != null) rs.close();} catch (Exception e) {e.printStackTrace();}
		}
		return -1; // 오류가 발생한 경우 디비의 오류
	}
	

	
			// 학습계획서 검색하는 기능 구현
	public ArrayList<PlanDTO> getList (String lectureDivide, String searchType, String search, int pageNumber) {
		if(lectureDivide.equals("전체")) {
			lectureDivide = "";
		}
		//DTO를 담을 수 있는 list
		ArrayList<PlanDTO> planList = null;	
		String SQL = "";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			if(searchType.contentEquals("최신순")) {
				SQL = "SELECT * FROM WHERE lectureDivide LIKE ? AND CONCAT(lectureName, lectureMentor, lectureTime, lectureSubject) LIKE " +
			"? ORDER BY id DESC LIMIT" + pageNumber * 5 + "," + pageNumber * 5 + 6;
			} else if (searchType.equals("추천순")) {
				SQL = "SELECT * FROM WHERE lectureDivide LIKE ? AND CONCAT(lectureName, lectureMentor, lectureTime, lectureSubject) LIKE " +
						"? ORDER BY id DESC LIMIT" + pageNumber * 5 + "," + pageNumber * 5 + 6;
			}
				
			conn = DatabaseUtil.getConnection();
			pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, "%" + lectureDivide + "%");
			pstmt.setString(2, "%" + lectureDivide + "%");
			rs = pstmt.executeQuery();
			// sql 실행한 결과를 리스트에 담음 초기화
			planList = new ArrayList<PlanDTO>();
			// 게시물이 존재할 때 마다 리스트에 담을 수 있도록 한다
				while(rs.next()) {
					PlanDTO plan = new PlanDTO(
							rs.getString(1),
							rs.getString(2),
							rs.getString(3),
							rs.getString(4),
							rs.getString(5),
							rs.getString(6),
							rs.getString(7),
							rs.getString(8),
							rs.getString(9),
							rs.getString(10),
							rs.getString(11),
							rs.getString(12),
							rs.getString(13),
							rs.getString(14),
							rs.getString(15),
							rs.getString(16),
							rs.getString(17),
							rs.getString(18),
							rs.getString(19),
							rs.getString(20),
							rs.getString(21),
							rs.getString(22)
						);
					//plan 에 담은 뒤 리스트에 추가해서 강의평가 데이터를 담을 수 있도록 한다
					planList.add(plan);
					}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try { if(conn != null) conn.close();} catch (Exception e) {e.printStackTrace();}
			try { if(pstmt != null) pstmt.close();} catch (Exception e) {e.printStackTrace();}
			try { if(rs != null) rs.close();} catch (Exception e) {e.printStackTrace();}
		}
		return planList;
	}
	
}